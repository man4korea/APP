<!-- üìÅ C:\xampp\htdocs\BPM\views\pages\invite.php -->
<!-- Create at 2508041135 Ver1.00 -->

<?php
require_once __DIR__ . '/../../includes/config.php';

// Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
$currentUser = $auth->getCurrentUser();
if (!$currentUser) {
    header('Location: /BPM/login.php');
    exit;
}

// ÌöåÏÇ¨ Ïª®ÌÖçÏä§Ìä∏ ÌôïÏù∏
$companyId = $tenant->getCurrentCompanyId();
if (!$companyId) {
    header('Location: /BPM/views/pages/company-register.php');
    exit;
}

// Ï¥àÎåÄ Í∂åÌïú ÌôïÏù∏
if (!$permission->hasModulePermission($currentUser['id'], $companyId, 'members', 'invite')) {
    $errorMessage = "Íµ¨ÏÑ±Ïõê Ï¥àÎåÄ Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.";
}

// Ï¥àÎåÄ ÌÜ†ÌÅ∞ÏúºÎ°ú Ï†ëÍ∑ºÌïú Í≤ΩÏö∞ (Ï¥àÎåÄ ÏàòÎùΩ ÌéòÏù¥ÏßÄ)
$inviteToken = $_GET['token'] ?? null;
if ($inviteToken) {
    include __DIR__ . '/invite-accept.php';
    exit;
}
?>

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Íµ¨ÏÑ±Ïõê Ï¥àÎåÄ - BPM</title>
    
    <!-- CSS -->
    <link rel="stylesheet" href="<?= base_url('assets/css/common.css') ?>">
    <link rel="stylesheet" href="<?= base_url('assets/css/components.css') ?>">
    <link rel="stylesheet" href="<?= base_url('assets/css/modules.css') ?>">
    
    <style>
        /* üü† Íµ¨ÏÑ±ÏõêÍ¥ÄÎ¶¨ Î™®Îìà ÏÉâÏÉÅ (#ff9f43 / #fff8f0) */
        .invite-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #fff8f0;
            min-height: 100vh;
        }

        .invite-header {
            background: linear-gradient(135deg, #ff9f43 0%, #e67e22 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 8px 25px rgba(255, 159, 67, 0.3);
        }

        .invite-header h1 {
            margin: 0 0 10px 0;
            font-size: 2.5rem;
            font-weight: 700;
        }

        .invite-header p {
            margin: 0;
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .invite-content {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 30px;
        }

        .invite-form-section {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            border-left: 5px solid #ff9f43;
        }

        .invite-list-section {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            max-height: 600px;
            overflow-y: auto;
        }

        .section-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 25px;
            padding-bottom: 10px;
            border-bottom: 2px solid #ff9f43;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #4a5568;
        }

        .required {
            color: #e53e3e;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .form-control:focus {
            outline: none;
            border-color: #ff9f43;
            box-shadow: 0 0 0 3px rgba(255, 159, 67, 0.1);
        }

        .form-control.error {
            border-color: #e53e3e;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .role-selector {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-top: 10px;
        }

        .role-option {
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .role-option:hover {
            border-color: #ff9f43;
            background: #fff8f0;
        }

        .role-option.selected {
            border-color: #ff9f43;
            background: #fff8f0;
        }

        .role-option input {
            display: none;
        }

        .role-title {
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 5px;
        }

        .role-description {
            font-size: 0.875rem;
            color: #718096;
        }

        .role-level {
            position: absolute;
            top: 5px;
            right: 8px;
            background: #ff9f43;
            color: white;
            font-size: 0.75rem;
            padding: 2px 6px;
            border-radius: 10px;
        }

        .btn-invite {
            width: 100%;
            background: linear-gradient(135deg, #ff9f43 0%, #e67e22 100%);
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 20px;
        }

        .btn-invite:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(255, 159, 67, 0.3);
        }

        .btn-invite:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error-message {
            color: #e53e3e;
            font-size: 0.875rem;
            margin-top: 5px;
            display: none;
        }

        .success-message {
            background: #f0fff4;
            border: 1px solid #9ae6b4;
            color: #22543d;
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
        }

        .help-text {
            font-size: 0.875rem;
            color: #718096;
            margin-top: 5px;
        }

        /* Ï¥àÎåÄ Î™©Î°ù Ïä§ÌÉÄÏùº */
        .invitation-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            margin-bottom: 10px;
            transition: all 0.3s ease;
        }

        .invitation-item:hover {
            background: #fff8f0;
            border-color: #ff9f43;
        }

        .invitation-info {
            flex: 1;
        }

        .invitation-email {
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 5px;
        }

        .invitation-meta {
            font-size: 0.875rem;
            color: #718096;
        }

        .invitation-status {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-sent {
            background: #d1ecf1;
            color: #0c5460;
        }

        .status-expired {
            background: #f8d7da;
            color: #721c24;
        }

        .invitation-actions {
            display: flex;
            gap: 10px;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 0.875rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-cancel {
            background: #e53e3e;
            color: white;
        }

        .btn-cancel:hover {
            background: #c53030;
        }

        .btn-resend {
            background: #ff9f43;
            color: white;
        }

        .btn-resend:hover {
            background: #e67e22;
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #718096;
        }

        .empty-state-icon {
            font-size: 3rem;
            margin-bottom: 15px;
        }

        @media (max-width: 768px) {
            .invite-content {
                grid-template-columns: 1fr;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .role-selector {
                grid-template-columns: 1fr;
            }
            
            .invite-header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="invite-container">
        <div class="invite-header">
            <h1>üë• Íµ¨ÏÑ±Ïõê Ï¥àÎåÄ</h1>
            <p>ÏÉàÎ°úÏö¥ ÌåÄÏõêÏùÑ BPM ÏãúÏä§ÌÖúÏóê Ï¥àÎåÄÌïòÏó¨ Ìï®Íªò Ìö®Ïú®Ï†ÅÏù∏ ÏóÖÎ¨¥ ÌîÑÎ°úÏÑ∏Ïä§Î•º Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî</p>
        </div>

        <?php if (isset($errorMessage)): ?>
            <div class="alert alert-error">
                <strong>Ïò§Î•ò:</strong> <?= htmlspecialchars($errorMessage) ?>
            </div>
        <?php else: ?>
            <div class="invite-content">
                <!-- Ï¥àÎåÄ Ìèº -->
                <div class="invite-form-section">
                    <div class="section-title">ÏÉà Íµ¨ÏÑ±Ïõê Ï¥àÎåÄ</div>
                    
                    <div class="success-message" id="successMessage">
                        <strong>Ï¥àÎåÄ ÏôÑÎ£å!</strong> Ï¥àÎåÄ Ïù¥Î©îÏùºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞úÏÜ°ÎêòÏóàÏäµÎãàÎã§.
                    </div>
                    
                    <form id="inviteForm">
                        <div class="form-group">
                            <label for="invite_email">Ïù¥Î©îÏùº Ï£ºÏÜå <span class="required">*</span></label>
                            <input type="email" id="invite_email" name="invite_email" class="form-control" required>
                            <div class="help-text">Ï¥àÎåÄÎ∞õÏùÑ ÏÇ¨Ïö©ÏûêÏùò Ïù¥Î©îÏùº Ï£ºÏÜåÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî</div>
                            <div class="error-message" id="invite_email_error"></div>
                        </div>

                        <div class="form-group">
                            <label>Í∂åÌïú Î†àÎ≤® <span class="required">*</span></label>
                            <div class="role-selector" id="roleSelector">
                                <!-- Ïó≠Ìï† ÏòµÏÖòÏùÄ JavaScriptÎ°ú ÎèôÏ†Å ÏÉùÏÑ± -->
                            </div>
                            <div class="error-message" id="role_type_error"></div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="department">Î∂ÄÏÑú</label>
                                <input type="text" id="department" name="department" class="form-control" placeholder="Ïòà: Í∞úÎ∞úÌåÄ">
                            </div>
                            
                            <div class="form-group">
                                <label for="job_title">ÏßÅÏ±Ö</label>
                                <input type="text" id="job_title" name="job_title" class="form-control" placeholder="Ïòà: ÏÑ†ÏûÑ Í∞úÎ∞úÏûê">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="message">Ï¥àÎåÄ Î©îÏãúÏßÄ</label>
                            <textarea id="message" name="message" class="form-control" rows="3" placeholder="Ï¥àÎåÄÎ∞õÏùÑ Î∂ÑÏóêÍ≤å Ï†ÑÎã¨Ìï† Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (ÏÑ†ÌÉùÏÇ¨Ìï≠)"></textarea>
                            <div class="help-text">Ïù¥ Î©îÏãúÏßÄÎäî Ï¥àÎåÄ Ïù¥Î©îÏùºÏóê Ìè¨Ìï®Îê©ÎãàÎã§</div>
                        </div>

                        <button type="submit" class="btn-invite" id="submitBtn">
                            <span class="loading-spinner" id="loadingSpinner"></span>
                            <span id="submitText">Ï¥àÎåÄ Ïù¥Î©îÏùº Î∞úÏÜ°</span>
                        </button>
                    </form>
                </div>

                <!-- Ï¥àÎåÄ Î™©Î°ù -->
                <div class="invite-list-section">
                    <div class="section-title">
                        Ï¥àÎåÄ ÌòÑÌô©
                        <button class="btn-small btn-resend" onclick="refreshInvitations()" style="float: right;">
                            üîÑ ÏÉàÎ°úÍ≥†Ïπ®
                        </button>
                    </div>
                    
                    <div id="invitationsList">
                        <div class="empty-state">
                            <div class="empty-state-icon">üìß</div>
                            <p>Ï¥àÎåÄ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
                        </div>
                    </div>
                </div>
            </div>
        <?php endif; ?>
    </div>

    <!-- JavaScript -->
    <script>
        let availableRoles = {};

        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
        document.addEventListener('DOMContentLoaded', function() {
            loadAvailableRoles();
            loadInvitations();
            setupFormSubmission();
        });

        // ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïó≠Ìï† Î°úÎìú
        async function loadAvailableRoles() {
            try {
                const response = await fetch('/BPM/api/users.php/roles');
                const result = await response.json();
                
                if (result.success) {
                    availableRoles = result.data;
                    renderRoleSelector();
                }
            } catch (error) {
                console.error('Failed to load roles:', error);
            }
        }

        // Ïó≠Ìï† ÏÑ†ÌÉùÍ∏∞ Î†åÎçîÎßÅ
        function renderRoleSelector() {
            const roleSelector = document.getElementById('roleSelector');
            const roleDescriptions = {
                'member': 'Í∏∞Î≥∏Ï†ÅÏù∏ ÌîÑÎ°úÏÑ∏Ïä§ Ï∞∏Ïó¨ Î∞è ÌÉúÏä§ÌÅ¨ ÏàòÌñâ',
                'process_owner': 'ÌîÑÎ°úÏÑ∏Ïä§ Í¥ÄÎ¶¨ Î∞è ÌÉúÏä§ÌÅ¨ Î∞∞Ï†ï Í∂åÌïú',
                'admin': 'Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú Í¥ÄÎ¶¨ Î∞è ÏÇ¨Ïö©Ïûê Í∂åÌïú Í¥ÄÎ¶¨',
                'founder': 'ÏµúÍ≥† Í¥ÄÎ¶¨Ïûê Í∂åÌïú (Î™®Îì† Í∏∞Îä• Ï†ëÍ∑º Í∞ÄÎä•)'
            };

            const roleLevels = {
                'member': '40',
                'process_owner': '60', 
                'admin': '80',
                'founder': '100'
            };

            roleSelector.innerHTML = '';
            
            Object.entries(availableRoles).forEach(([roleKey, roleName], index) => {
                const roleOption = document.createElement('div');
                roleOption.className = 'role-option';
                if (index === 0) roleOption.classList.add('selected');
                
                roleOption.innerHTML = `
                    <input type="radio" name="role_type" value="${roleKey}" ${index === 0 ? 'checked' : ''}>
                    <div class="role-level">${roleLevels[roleKey]}</div>
                    <div class="role-title">${roleName}</div>
                    <div class="role-description">${roleDescriptions[roleKey] || ''}</div>
                `;
                
                roleOption.onclick = () => selectRole(roleOption, roleKey);
                roleSelector.appendChild(roleOption);
            });
        }

        // Ïó≠Ìï† ÏÑ†ÌÉù
        function selectRole(element, roleKey) {
            document.querySelectorAll('.role-option').forEach(option => {
                option.classList.remove('selected');
            });
            
            element.classList.add('selected');
            document.querySelector(`input[value="${roleKey}"]`).checked = true;
        }

        // Ìèº Ï†úÏ∂ú ÏÑ§Ï†ï
        function setupFormSubmission() {
            document.getElementById('inviteForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const submitBtn = document.getElementById('submitBtn');
                const loadingSpinner = document.getElementById('loadingSpinner');
                const submitText = document.getElementById('submitText');
                const successMessage = document.getElementById('successMessage');
                
                // Î°úÎî© ÏãúÏûë
                submitBtn.disabled = true;
                loadingSpinner.style.display = 'inline-block';
                submitText.textContent = 'Î∞úÏÜ° Ï§ë...';
                
                // ÏóêÎü¨ Î©îÏãúÏßÄ Ï¥àÍ∏∞Ìôî
                clearErrors();
                successMessage.style.display = 'none';
                
                try {
                    // Ìèº Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
                    const formData = new FormData(this);
                    const data = Object.fromEntries(formData);
                    
                    // API ÏöîÏ≤≠
                    const response = await fetch('/BPM/api/users.php/invite', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // ÏÑ±Í≥µ
                        successMessage.style.display = 'block';
                        this.reset();
                        renderRoleSelector(); // Ïó≠Ìï† ÏÑ†ÌÉùÍ∏∞ Î¶¨ÏÖã
                        loadInvitations(); // Ï¥àÎåÄ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
                    } else {
                        // Ïò§Î•ò Ï≤òÎ¶¨
                        if (result.errors) {
                            showErrors(result.errors);
                        } else {
                            alert('Ï¥àÎåÄ Î∞úÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + result.message);
                        }
                    }
                } catch (error) {
                    console.error('Invitation error:', error);
                    alert('Ï¥àÎåÄ Î∞úÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
                } finally {
                    // Î°úÎî© Ï¢ÖÎ£å
                    submitBtn.disabled = false;
                    loadingSpinner.style.display = 'none';
                    submitText.textContent = 'Ï¥àÎåÄ Ïù¥Î©îÏùº Î∞úÏÜ°';
                }
            });
        }

        // Ï¥àÎåÄ Î™©Î°ù Î°úÎìú
        async function loadInvitations() {
            try {
                const response = await fetch('/BPM/api/users.php/invitations');
                const result = await response.json();
                
                if (result.success) {
                    renderInvitations(result.data);
                }
            } catch (error) {
                console.error('Failed to load invitations:', error);
            }
        }

        // Ï¥àÎåÄ Î™©Î°ù Î†åÎçîÎßÅ
        function renderInvitations(invitations) {
            const invitationsList = document.getElementById('invitationsList');
            
            if (invitations.length === 0) {
                invitationsList.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">üìß</div>
                        <p>ÏïÑÏßÅ Ï¥àÎåÄÌïú Íµ¨ÏÑ±ÏõêÏù¥ ÏóÜÏäµÎãàÎã§<br>ÏÉàÎ°úÏö¥ ÌåÄÏõêÏùÑ Ï¥àÎåÄÌï¥Î≥¥ÏÑ∏Ïöî!</p>
                    </div>
                `;
                return;
            }
            
            invitationsList.innerHTML = invitations.map(invitation => `
                <div class="invitation-item">
                    <div class="invitation-info">
                        <div class="invitation-email">${invitation.email}</div>
                        <div class="invitation-meta">
                            ${availableRoles[invitation.role_type] || invitation.role_type} ‚Ä¢ 
                            ${invitation.department || 'Î∂ÄÏÑú ÎØ∏ÏßÄÏ†ï'} ‚Ä¢ 
                            ${formatDate(invitation.created_at)}
                        </div>
                    </div>
                    <div style="display: flex; flex-direction: column; align-items: center; gap: 8px;">
                        <div class="invitation-status status-${invitation.status}">
                            ${getStatusText(invitation.status)}
                        </div>
                        <div class="invitation-actions">
                            ${invitation.status === 'pending' || invitation.status === 'sent' ? `
                                <button class="btn-small btn-resend" onclick="resendInvitation('${invitation.id}')">
                                    Ïû¨Î∞úÏÜ°
                                </button>
                                <button class="btn-small btn-cancel" onclick="cancelInvitation('${invitation.id}')">
                                    Ï∑®ÏÜå
                                </button>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // ÏÉÅÌÉú ÌÖçÏä§Ìä∏ Î≥ÄÌôò
        function getStatusText(status) {
            const statusMap = {
                'pending': 'ÎåÄÍ∏∞Ï§ë',
                'sent': 'Î∞úÏÜ°Îê®',
                'accepted': 'ÏàòÎùΩÎê®',
                'expired': 'ÎßåÎ£åÎê®',
                'cancelled': 'Ï∑®ÏÜåÎê®'
            };
            return statusMap[status] || status;
        }

        // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('ko-KR', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Ï¥àÎåÄ Ïû¨Î∞úÏÜ°
        async function resendInvitation(invitationId) {
            if (!confirm('Ï¥àÎåÄ Ïù¥Î©îÏùºÏùÑ Îã§Ïãú Î∞úÏÜ°ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;
            
            try {
                // Íµ¨ÌòÑ ÏòàÏ†ï: Ïû¨Î∞úÏÜ° API
                alert('Ïû¨Î∞úÏÜ° Í∏∞Îä•ÏùÄ Í≥ß Íµ¨ÌòÑÎê† ÏòàÏ†ïÏûÖÎãàÎã§.');
            } catch (error) {
                console.error('Resend failed:', error);
                alert('Ïû¨Î∞úÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
        }

        // Ï¥àÎåÄ Ï∑®ÏÜå
        async function cancelInvitation(invitationId) {
            if (!confirm('Ïù¥ Ï¥àÎåÄÎ•º Ï∑®ÏÜåÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;
            
            try {
                const response = await fetch(`/BPM/api/users.php/cancel-invitation?invitation_id=${invitationId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    loadInvitations(); // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
                } else {
                    alert('Ï¥àÎåÄ Ï∑®ÏÜå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + result.message);
                }
            } catch (error) {
                console.error('Cancel failed:', error);
                alert('Ï¥àÎåÄ Ï∑®ÏÜå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
        }

        // Ï¥àÎåÄ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
        function refreshInvitations() {
            loadInvitations();
        }

        // ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
        function showErrors(errors) {
            for (const [field, message] of Object.entries(errors)) {
                const errorElement = document.getElementById(field + '_error');
                const inputElement = document.getElementById(field);
                
                if (errorElement && inputElement) {
                    errorElement.textContent = message;
                    errorElement.style.display = 'block';
                    inputElement.classList.add('error');
                }
            }
        }

        // ÏóêÎü¨ Î©îÏãúÏßÄ Ï¥àÍ∏∞Ìôî
        function clearErrors() {
            document.querySelectorAll('.error-message').forEach(element => {
                element.style.display = 'none';
            });
            
            document.querySelectorAll('.form-control').forEach(element => {
                element.classList.remove('error');
            });
        }

        // Ïã§ÏãúÍ∞Ñ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        document.addEventListener('input', function(e) {
            if (e.target.classList.contains('form-control')) {
                e.target.classList.remove('error');
                const errorElement = document.getElementById(e.target.id + '_error');
                if (errorElement) {
                    errorElement.style.display = 'none';
                }
            }
        });
    </script>
</body>
</html>